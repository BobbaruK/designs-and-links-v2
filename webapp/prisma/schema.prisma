// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and Authorization related tables
enum UserRole {
  ADMIN
  EDITOR
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String?
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  UserAvatarCreated     UserAvatar[]           @relation("userAvatarCreated")
  UserAvatarUpdated     UserAvatar[]           @relation("userAvatarUpdated")
  formValidationCreated DL_FormValidation[]    @relation("formValidationCreated")
  formValidationUpdated DL_FormValidation[]    @relation("formValidationUpdated")
  topicCreated          DL_Topic[]             @relation("topicCreated")
  topicUpdated          DL_Topic[]             @relation("topicUpdated")

  @@index([id, email, image])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String
  emailOld String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
  @@index([id, token, email])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([id, token, email])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([id, token, email])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([id, userId])
}

// Designs and Links related tables
model DL_Topic {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  slug          String   @unique
  description   String?
  createdBy     User?    @relation("topicCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("topicUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
}

model DL_FormValidation {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  slug          String   @unique
  description   String?
  createdBy     User?    @relation("formValidationCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("formValidationUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@unique([name, slug])
  @@index([id, slug])
}

model DL_LanguageType {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  slug        String   @unique
  description String?
}

model DL_LandingPageType {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  slug        String   @unique
  description String?
}

// Avatars related tables
model UserAvatar {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  url           String
  createdBy     User?    @relation("userAvatarCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("userAvatarUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
}
