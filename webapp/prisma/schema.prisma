// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and Authorization related tables
enum UserRole {
  ADMIN
  EDITOR
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String?
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  UserAvatarCreated     DL_UserAvatar[]        @relation("userAvatarCreated")
  UserAvatarUpdated     DL_UserAvatar[]        @relation("userAvatarUpdated")
  formValidationCreated DL_FormValidation[]    @relation("formValidationCreated")
  formValidationUpdated DL_FormValidation[]    @relation("formValidationUpdated")
  topicCreated          DL_Topic[]             @relation("topicCreated")
  topicUpdated          DL_Topic[]             @relation("topicUpdated")
  licenseCreated        DL_License[]           @relation("licenseCreated")
  licenseUpdated        DL_License[]           @relation("licenseUpdated")
  lpTypeCreated         DL_LandingPageType[]   @relation("lpTypeCreated")
  lpTypeUpdated         DL_LandingPageType[]   @relation("lpTypeUpdated")
  flagsCreated          DL_Flag[]              @relation("flagsCreated")
  flagsUpdated          DL_Flag[]              @relation("flagsUpdated")
  languageCreated       DL_Language[]          @relation("languageCreated")
  languageUpdated       DL_Language[]          @relation("languageUpdated")
  brandLogoCreated      DL_BrandLogo[]         @relation("brandLogoCreated")
  brandLogoUpdated      DL_BrandLogo[]         @relation("brandLogoUpdated")
  brandCreated          DL_Brand[]             @relation("brandCreated")
  brandUpdated          DL_Brand[]             @relation("brandUpdated")

  @@index([id, email, image])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String
  emailOld String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
  @@index([id, token, email])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([id, token, email])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([id, token, email])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([id, userId])
}

// Designs and Links related tables
model DL_Topic {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  slug          String   @unique
  description   String?
  createdBy     User?    @relation("topicCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("topicUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@unique([name, slug])
  @@index([id, slug])
}

model DL_FormValidation {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  slug          String   @unique
  description   String?
  createdBy     User?    @relation("formValidationCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("formValidationUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@unique([name, slug])
  @@index([id, slug])
}

model DL_License {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  slug          String   @unique
  description   String?
  createdBy     User?    @relation("licenseCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("licenseUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@unique([name, slug])
  @@index([id, slug])
}

model DL_LandingPageType {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  slug          String   @unique
  description   String?
  createdBy     User?    @relation("lpTypeCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("lpTypeUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@unique([name, slug])
  @@index([id, slug])
}

model DL_Language {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  englishName   String   @unique
  iso_639_1     String   @unique
  iso_3166_1    String?
  flag          String?
  createdBy     User?    @relation("languageCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("languageUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id, iso_639_1, flag])
}

model DL_Brand {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  slug          String   @unique
  logo          String?
  createdBy     User?    @relation("brandCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("brandUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id, slug])
}

// Avatars related tables
model DL_UserAvatar {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  url           String
  createdBy     User?    @relation("userAvatarCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("userAvatarUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
}

model DL_Flag {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  url           String
  createdBy     User?    @relation("flagsCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("flagsUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id])
}

model DL_BrandLogo {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  url           String
  createdBy     User?    @relation("brandLogoCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("brandLogoUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id])
}
